import pytest

from . import prefix


@pytest.mark.parametrize(
    "inp, expected",
    [
        ("Z√ºrich, Wei√ü, ≈Å√≥d≈∫ ‚Äî S√£o Tom√©", "Zurich, Weiss, Lodz - Sao Tome"),
        ("na√Øve caf√©", "naive cafe"),
        ("√Ür√∏sk√∏bing & ≈ìuf", "Aeroskobing & oeuf"),
        (
            "Iceland: √ûingvellir, Eyjafjallaj√∂kull",
            "Iceland: Thingvellir, Eyjafjallajokull",
        ),
        (
            "Istanbul ‚Äì ‚Äúƒ∞zmir‚Äù",
            'Istanbul - "Izmir"',
        ),  # ƒ∞‚Üíi, curly quotes/dash normalized
        ("A¬†B", "A B"),  # NBSP -> space
        ("ASCII 123", "ASCII 123"),  # unchanged ASCII
        ("AüçïB –ú–æ—Å–∫–≤–∞", "A?B ??????"),  # non-ASCII that isn't diacritics -> '?'
        ("e\u0301clair", "eclair"),  # combining accent stripped
    ],
)
def test_ascii_fold_examples(inp, expected):
    assert prefix._ascii_fold(inp) == expected


def test_ascii_fold_specific_letters():
    # Spot-check explicit replacements that don't come from simple diacritic stripping
    pairs = {
        "√ü": "ss",
        "·∫û": "SS",
        "√¶": "ae",
        "√Ü": "Ae",
        "≈ì": "oe",
        "≈í": "Oe",
        "√∏": "o",
        "≈Å√≥d≈∫": "Lodz",
        "ƒü": "g",
        "ƒ∞zmir": "Izmir",
        "ƒ±": "i",
    }
    for src, want in pairs.items():
        assert prefix._ascii_fold(src) == want


def test_prefix_lookup():
    lookup = prefix.PrefixLookup(["Z√ºrich", "Stra√üenbahn", "B√•", "zuffenhausen"])

    assert not lookup.find_prefix("ich")
    assert lookup.find_prefix("zur") == ["Z√ºrich"]
    assert lookup.find_prefix("ba") == ["B√•"]
    assert lookup.find_prefix("zu") == ["zuffenhausen", "Z√ºrich"]
    assert lookup.find_prefix("zu", limit=1) == ["zuffenhausen"]
